"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file

KINOVA (R) KORTEX (TM)

Copyright (c) 2018 Kinova inc. All rights reserved.

This software may be modified and distributed
under the terms of the BSD 3-Clause license.

Refer to the LICENSE file for details.
"""
from . import Common_pb2
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions
from .Common_pb2 import (
    ALBANIA_AL as ALBANIA_AL,
    AMERICAN_SAMOA_AS as AMERICAN_SAMOA_AS,
    AMPERE as AMPERE,
    ANGUILLA_AI as ANGUILLA_AI,
    ANTIGUA_AND_BARBUDA_AG as ANTIGUA_AND_BARBUDA_AG,
    ARMSTATE_BASE_INITIALIZATION as ARMSTATE_BASE_INITIALIZATION,
    ARMSTATE_BRAKE_RELEASING as ARMSTATE_BRAKE_RELEASING,
    ARMSTATE_IDLE as ARMSTATE_IDLE,
    ARMSTATE_INITIALIZATION as ARMSTATE_INITIALIZATION,
    ARMSTATE_IN_FAULT as ARMSTATE_IN_FAULT,
    ARMSTATE_MAINTENANCE as ARMSTATE_MAINTENANCE,
    ARMSTATE_RESERVED as ARMSTATE_RESERVED,
    ARMSTATE_SERVOING_LOW_LEVEL as ARMSTATE_SERVOING_LOW_LEVEL,
    ARMSTATE_SERVOING_MANUALLY_CONTROLLED as ARMSTATE_SERVOING_MANUALLY_CONTROLLED,
    ARMSTATE_SERVOING_PLAYING_SEQUENCE as ARMSTATE_SERVOING_PLAYING_SEQUENCE,
    ARMSTATE_SERVOING_READY as ARMSTATE_SERVOING_READY,
    ARMSTATE_UNSPECIFIED as ARMSTATE_UNSPECIFIED,
    ARUBA_AW as ARUBA_AW,
    AUSTRALIA_AU as AUSTRALIA_AU,
    AUSTRIA_AT as AUSTRIA_AT,
    AZERBAIJAN_AZ as AZERBAIJAN_AZ,
    ArmState as ArmState,
    BAHAMAS_BS as BAHAMAS_BS,
    BAHRAIN_BH as BAHRAIN_BH,
    BANGLADESH_BD as BANGLADESH_BD,
    BASE as BASE,
    BELARUS_BY as BELARUS_BY,
    BELGIUM_BE as BELGIUM_BE,
    BERMUDA_BM as BERMUDA_BM,
    BIG_ACTUATOR as BIG_ACTUATOR,
    BOLIVARIAN_REPUBLIC_OF_VENEZUELA_VE as BOLIVARIAN_REPUBLIC_OF_VENEZUELA_VE,
    BOSNIA_AND_HERZEGOVINA_BA as BOSNIA_AND_HERZEGOVINA_BA,
    BRAZIL_BR as BRAZIL_BR,
    BRITISH_VIRGIN_ISLANDS_VG as BRITISH_VIRGIN_ISLANDS_VG,
    BRUNEI_DARUSSALAM_BN as BRUNEI_DARUSSALAM_BN,
    BULGARIA_BG as BULGARIA_BG,
    CAMBODIA_KH as CAMBODIA_KH,
    CANADA_CA as CANADA_CA,
    CARTESIAN_REFERENCE_FRAME_BASE as CARTESIAN_REFERENCE_FRAME_BASE,
    CARTESIAN_REFERENCE_FRAME_MIXED as CARTESIAN_REFERENCE_FRAME_MIXED,
    CARTESIAN_REFERENCE_FRAME_TOOL as CARTESIAN_REFERENCE_FRAME_TOOL,
    CARTESIAN_REFERENCE_FRAME_UNSPECIFIED as CARTESIAN_REFERENCE_FRAME_UNSPECIFIED,
    CAYMAN_ISLANDS_KY as CAYMAN_ISLANDS_KY,
    CELSIUS as CELSIUS,
    CHINA_CN as CHINA_CN,
    COLOMBIA_CO as COLOMBIA_CO,
    COSTA_RICA_CR as COSTA_RICA_CR,
    CROATIA_HR as CROATIA_HR,
    CYPRUS_CY as CYPRUS_CY,
    CZECH_REPUBLIC_CZ as CZECH_REPUBLIC_CZ,
    CartesianReferenceFrame as CartesianReferenceFrame,
    Connection as Connection,
    CountryCode as CountryCode,
    CountryCodeIdentifier as CountryCodeIdentifier,
    DEGREE as DEGREE,
    DEGREE_PER_MILLISECOND as DEGREE_PER_MILLISECOND,
    DEGREE_PER_SECOND as DEGREE_PER_SECOND,
    DEGREE_PER_SECOND_2 as DEGREE_PER_SECOND_2,
    DELETE_PERMISSION as DELETE_PERMISSION,
    DENMARK_DK as DENMARK_DK,
    DeviceHandle as DeviceHandle,
    DeviceTypes as DeviceTypes,
    ECUADOR_EC as ECUADOR_EC,
    EGYPT_EG as EGYPT_EG,
    EL_SALVADOR_SV as EL_SALVADOR_SV,
    ESTONIA_EE as ESTONIA_EE,
    ETHIOPIA_ET as ETHIOPIA_ET,
    Empty as Empty,
    FINLAND_FI as FINLAND_FI,
    FRANCE_FR as FRANCE_FR,
    FRENCH_GUIANA_GF as FRENCH_GUIANA_GF,
    GERMANY_DE as GERMANY_DE,
    GREECE_GR as GREECE_GR,
    GRENADA_GD as GRENADA_GD,
    GRIPPER as GRIPPER,
    GUADELOUPE_GP as GUADELOUPE_GP,
    GUAM_GU as GUAM_GU,
    GUATEMALA_GT as GUATEMALA_GT,
    HOLY_SEE_VATICAN_CITY_STATE_VA as HOLY_SEE_VATICAN_CITY_STATE_VA,
    HONG_KONG_HK as HONG_KONG_HK,
    HUNGARY_HU as HUNGARY_HU,
    ICELAND_IS as ICELAND_IS,
    INDIA_IN as INDIA_IN,
    INDONESIA_ID as INDONESIA_ID,
    INTERCONNECT as INTERCONNECT,
    IRELAND_IE as IRELAND_IE,
    ISRAEL_IL as ISRAEL_IL,
    ITALY_IT as ITALY_IT,
    JAPAN_JP as JAPAN_JP,
    JORDAN_JO as JORDAN_JO,
    KILOGRAM as KILOGRAM,
    KUWAIT_KW as KUWAIT_KW,
    LAO_PDR_LA as LAO_PDR_LA,
    LATVIA_LV as LATVIA_LV,
    LEBANON_LB as LEBANON_LB,
    LESOTHO_LS as LESOTHO_LS,
    LIECHTENSTEIN_LI as LIECHTENSTEIN_LI,
    LITHUANIA_LT as LITHUANIA_LT,
    LUXEMBOURG_LU as LUXEMBOURG_LU,
    MALAWI_MW as MALAWI_MW,
    MALAYSIA_MY as MALAYSIA_MY,
    MALDIVES_MV as MALDIVES_MV,
    MALTA_MT as MALTA_MT,
    MARTINIQUE_MQ as MARTINIQUE_MQ,
    MAURITANIA_MR as MAURITANIA_MR,
    MAURITIUS_MU as MAURITIUS_MU,
    MAYOTTE_YT as MAYOTTE_YT,
    MEDIUM_ACTUATOR as MEDIUM_ACTUATOR,
    METER_PER_SECOND as METER_PER_SECOND,
    METER_PER_SECOND_2 as METER_PER_SECOND_2,
    MEXICO_MX as MEXICO_MX,
    MOLDOVA_MD as MOLDOVA_MD,
    MONACO_MC as MONACO_MC,
    MONGOLIA_MN as MONGOLIA_MN,
    MONTENEGRO_ME as MONTENEGRO_ME,
    MOROCCO_MA as MOROCCO_MA,
    NETHERLANDS_NL as NETHERLANDS_NL,
    NEWTON as NEWTON,
    NEWTON_METER as NEWTON_METER,
    NEW_ZEALAND_NZ as NEW_ZEALAND_NZ,
    NICARAGUA_NI as NICARAGUA_NI,
    NORWAY_NO as NORWAY_NO,
    NOTIFICATION_TYPE_EVENT as NOTIFICATION_TYPE_EVENT,
    NOTIFICATION_TYPE_FIX_RATE as NOTIFICATION_TYPE_FIX_RATE,
    NOTIFICATION_TYPE_THRESHOLD as NOTIFICATION_TYPE_THRESHOLD,
    NOTIFICATION_TYPE_UNSPECIFIED as NOTIFICATION_TYPE_UNSPECIFIED,
    NO_PERMISSION as NO_PERMISSION,
    NotificationHandle as NotificationHandle,
    NotificationOptions as NotificationOptions,
    NotificationType as NotificationType,
    OMAN_OM as OMAN_OM,
    PANAMA_PA as PANAMA_PA,
    PARAGUAY_PY as PARAGUAY_PY,
    PERU_PE as PERU_PE,
    PHILIPPINES_PH as PHILIPPINES_PH,
    POLAND_PL as POLAND_PL,
    PORTUGAL_PT as PORTUGAL_PT,
    PUERTO_RICO_PR as PUERTO_RICO_PR,
    Permission as Permission,
    READ_PERMISSION as READ_PERMISSION,
    REPUBLIC_OF_KOREA_KR as REPUBLIC_OF_KOREA_KR,
    REPUBLIC_OF_MACEDONIA_MK as REPUBLIC_OF_MACEDONIA_MK,
    REUNION_RE as REUNION_RE,
    ROMANIA_RO as ROMANIA_RO,
    RUSSIAN_FEDERATION_RU as RUSSIAN_FEDERATION_RU,
    SAFETY_STATUS_ERROR as SAFETY_STATUS_ERROR,
    SAFETY_STATUS_NORMAL as SAFETY_STATUS_NORMAL,
    SAFETY_STATUS_UNSPECIFIED as SAFETY_STATUS_UNSPECIFIED,
    SAFETY_STATUS_WARNING as SAFETY_STATUS_WARNING,
    SERBIA_RS as SERBIA_RS,
    SINGAPORE_SI as SINGAPORE_SI,
    SLOVAKIA_SK as SLOVAKIA_SK,
    SMALL_ACTUATOR as SMALL_ACTUATOR,
    SOUTH_AFRICA_ZA as SOUTH_AFRICA_ZA,
    SPAIN_ES as SPAIN_ES,
    SRI_LANKA_LK as SRI_LANKA_LK,
    SWEDEN_SE as SWEDEN_SE,
    SWITZERLAND_CH as SWITZERLAND_CH,
    SafetyHandle as SafetyHandle,
    SafetyNotification as SafetyNotification,
    SafetyStatusValue as SafetyStatusValue,
    TAIWAN_PROVINCE_OF_CHINA_TW as TAIWAN_PROVINCE_OF_CHINA_TW,
    THAILAND_TH as THAILAND_TH,
    TICK as TICK,
    TRINIDAD_AND_TOBAGO_TT as TRINIDAD_AND_TOBAGO_TT,
    TUNISIA_TN as TUNISIA_TN,
    TURKEY_TR as TURKEY_TR,
    Timestamp as Timestamp,
    UARTConfiguration as UARTConfiguration,
    UARTDeviceIdentification as UARTDeviceIdentification,
    UARTParity as UARTParity,
    UARTSpeed as UARTSpeed,
    UARTStopBits as UARTStopBits,
    UARTWordLength as UARTWordLength,
    UART_PARITY_EVEN as UART_PARITY_EVEN,
    UART_PARITY_NONE as UART_PARITY_NONE,
    UART_PARITY_ODD as UART_PARITY_ODD,
    UART_PARITY_UNSPECIFIED as UART_PARITY_UNSPECIFIED,
    UART_SPEED_115200 as UART_SPEED_115200,
    UART_SPEED_1382400 as UART_SPEED_1382400,
    UART_SPEED_1612800 as UART_SPEED_1612800,
    UART_SPEED_1843200 as UART_SPEED_1843200,
    UART_SPEED_19200 as UART_SPEED_19200,
    UART_SPEED_2073600 as UART_SPEED_2073600,
    UART_SPEED_2188800 as UART_SPEED_2188800,
    UART_SPEED_2246400 as UART_SPEED_2246400,
    UART_SPEED_230400 as UART_SPEED_230400,
    UART_SPEED_38400 as UART_SPEED_38400,
    UART_SPEED_460800 as UART_SPEED_460800,
    UART_SPEED_4800 as UART_SPEED_4800,
    UART_SPEED_57600 as UART_SPEED_57600,
    UART_SPEED_921600 as UART_SPEED_921600,
    UART_SPEED_9600 as UART_SPEED_9600,
    UART_SPEED_UNSPECIFIED as UART_SPEED_UNSPECIFIED,
    UART_STOP_BITS_0_5 as UART_STOP_BITS_0_5,
    UART_STOP_BITS_1 as UART_STOP_BITS_1,
    UART_STOP_BITS_1_5 as UART_STOP_BITS_1_5,
    UART_STOP_BITS_2 as UART_STOP_BITS_2,
    UART_STOP_BITS_UNSPECIFIED as UART_STOP_BITS_UNSPECIFIED,
    UART_WORD_LENGTH_7 as UART_WORD_LENGTH_7,
    UART_WORD_LENGTH_8 as UART_WORD_LENGTH_8,
    UART_WORD_LENGTH_9 as UART_WORD_LENGTH_9,
    UART_WORD_LENGTH_UNSPECIFIED as UART_WORD_LENGTH_UNSPECIFIED,
    UKRAINE_UA as UKRAINE_UA,
    UNITED_ARAB_EMIRATES_AE as UNITED_ARAB_EMIRATES_AE,
    UNITED_KINGDOM_GB as UNITED_KINGDOM_GB,
    UNITED_STATES_US as UNITED_STATES_US,
    UNSPECIFIED_COUNTRY_CODE as UNSPECIFIED_COUNTRY_CODE,
    UNSPECIFIED_DEVICE_TYPE as UNSPECIFIED_DEVICE_TYPE,
    UNSPECIFIED_UNIT as UNSPECIFIED_UNIT,
    UPDATE_PERMISSION as UPDATE_PERMISSION,
    Unit as Unit,
    UserProfileHandle as UserProfileHandle,
    VIETNAM_VN as VIETNAM_VN,
    VISION as VISION,
    VOLT as VOLT,
    XBIG_ACTUATOR as XBIG_ACTUATOR,
)

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _ServiceVersion:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _ServiceVersionEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_ServiceVersion.ValueType], builtins.type):  # noqa: F821
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    RESERVED_0: _ServiceVersion.ValueType  # 0
    """Reserved"""
    CURRENT_VERSION: _ServiceVersion.ValueType  # 1
    """Current version"""

class ServiceVersion(_ServiceVersion, metaclass=_ServiceVersionEnumTypeWrapper):
    """Identifies DeviceConfig current version"""

RESERVED_0: ServiceVersion.ValueType  # 0
"""Reserved"""
CURRENT_VERSION: ServiceVersion.ValueType  # 1
"""Current version"""
global___ServiceVersion = ServiceVersion

class _RunModes:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _RunModesEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_RunModes.ValueType], builtins.type):  # noqa: F821
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    RUN_MODE: _RunModes.ValueType  # 0
    CALIBRATION_MODE: _RunModes.ValueType  # 1
    """calibration mode"""
    CONFIGURATION_MODE: _RunModes.ValueType  # 2
    """configuration mode"""
    DEBUG_MODE: _RunModes.ValueType  # 3
    """debug mode"""
    TUNING_MODE: _RunModes.ValueType  # 4
    """tuning mode"""

class RunModes(_RunModes, metaclass=_RunModesEnumTypeWrapper):
    """Options for the run mode for the device"""

RUN_MODE: RunModes.ValueType  # 0
CALIBRATION_MODE: RunModes.ValueType  # 1
"""calibration mode"""
CONFIGURATION_MODE: RunModes.ValueType  # 2
"""configuration mode"""
DEBUG_MODE: RunModes.ValueType  # 3
"""debug mode"""
TUNING_MODE: RunModes.ValueType  # 4
"""tuning mode"""
global___RunModes = RunModes

class _CalibrationItem:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _CalibrationItemEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_CalibrationItem.ValueType], builtins.type):  # noqa: F821
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    UNSPECIFIED_CALIBRATION_ITEM: _CalibrationItem.ValueType  # 0
    """Unspecified calibration item"""
    COGGING: _CalibrationItem.ValueType  # 1
    """Cogging calibration"""
    MAGNETIC: _CalibrationItem.ValueType  # 2
    """Magnetic sensors calibration"""
    MOTOR: _CalibrationItem.ValueType  # 3
    """Motor calibration"""
    POSITION_RANGE: _CalibrationItem.ValueType  # 4
    """Position range calibration"""

class CalibrationItem(_CalibrationItem, metaclass=_CalibrationItemEnumTypeWrapper):
    """Admissible calibration items"""

UNSPECIFIED_CALIBRATION_ITEM: CalibrationItem.ValueType  # 0
"""Unspecified calibration item"""
COGGING: CalibrationItem.ValueType  # 1
"""Cogging calibration"""
MAGNETIC: CalibrationItem.ValueType  # 2
"""Magnetic sensors calibration"""
MOTOR: CalibrationItem.ValueType  # 3
"""Motor calibration"""
POSITION_RANGE: CalibrationItem.ValueType  # 4
"""Position range calibration"""
global___CalibrationItem = CalibrationItem

class _CalibrationStatus:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _CalibrationStatusEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_CalibrationStatus.ValueType], builtins.type):  # noqa: F821
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    UNSPECIFIED_CALIBRATION_STATUS: _CalibrationStatus.ValueType  # 0
    """Unspecified calibration status"""
    NOT_CALIBRATED: _CalibrationStatus.ValueType  # 1
    """Calibration is not done"""
    IN_PROGRESS: _CalibrationStatus.ValueType  # 2
    """Calibration is in progress"""
    CALIBRATED: _CalibrationStatus.ValueType  # 3
    """Calibration was successfully completed"""
    IN_FAULT: _CalibrationStatus.ValueType  # 4
    """Calibration failed"""

class CalibrationStatus(_CalibrationStatus, metaclass=_CalibrationStatusEnumTypeWrapper):
    """Admissible calibration status"""

UNSPECIFIED_CALIBRATION_STATUS: CalibrationStatus.ValueType  # 0
"""Unspecified calibration status"""
NOT_CALIBRATED: CalibrationStatus.ValueType  # 1
"""Calibration is not done"""
IN_PROGRESS: CalibrationStatus.ValueType  # 2
"""Calibration is in progress"""
CALIBRATED: CalibrationStatus.ValueType  # 3
"""Calibration was successfully completed"""
IN_FAULT: CalibrationStatus.ValueType  # 4
"""Calibration failed"""
global___CalibrationStatus = CalibrationStatus

class _SafetyLimitType:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _SafetyLimitTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_SafetyLimitType.ValueType], builtins.type):  # noqa: F821
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    UNSPECIFIED_SAFETY_LIMIT_TYPE: _SafetyLimitType.ValueType  # 0
    MINIMAL_LIMIT: _SafetyLimitType.ValueType  # 1
    """Safety that will kick in below a certain Minimum threshold (e.g. Minimum temperature safety)"""
    MAXIMAL_LIMIT: _SafetyLimitType.ValueType  # 2
    """Safety that will kick in above a certain Maximum threshold (e.g. Maximum voltage safety)"""
    EVENT_LIMIT: _SafetyLimitType.ValueType  # 3
    """Safety that will kick in in reaction to a specific event (e.g. motor drive fault)"""

class SafetyLimitType(_SafetyLimitType, metaclass=_SafetyLimitTypeEnumTypeWrapper):
    """Types of safeties limits"""

UNSPECIFIED_SAFETY_LIMIT_TYPE: SafetyLimitType.ValueType  # 0
MINIMAL_LIMIT: SafetyLimitType.ValueType  # 1
"""Safety that will kick in below a certain Minimum threshold (e.g. Minimum temperature safety)"""
MAXIMAL_LIMIT: SafetyLimitType.ValueType  # 2
"""Safety that will kick in above a certain Maximum threshold (e.g. Maximum voltage safety)"""
EVENT_LIMIT: SafetyLimitType.ValueType  # 3
"""Safety that will kick in in reaction to a specific event (e.g. motor drive fault)"""
global___SafetyLimitType = SafetyLimitType

class _CapSenseMode:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _CapSenseModeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_CapSenseMode.ValueType], builtins.type):  # noqa: F821
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    RESERVED: _CapSenseMode.ValueType  # 0
    """Reserved, do not use."""
    INACTIVE: _CapSenseMode.ValueType  # 1
    """Cap sensor is inactive."""
    ACTIVE_AUTO_THRESHOLD: _CapSenseMode.ValueType  # 2
    """Cap sensor is active in automatic threshold mode."""
    ACTIVE_NOISE_ATT: _CapSenseMode.ValueType  # 4
    """Cap sensor is active with noise mitigation enabled."""
    ACTIVE_NORMAL: _CapSenseMode.ValueType  # 5
    """Cap sensor is active in normal mode."""
    CONFIGURATION: _CapSenseMode.ValueType  # 6
    """Configuration mode."""

class CapSenseMode(_CapSenseMode, metaclass=_CapSenseModeEnumTypeWrapper):
    """Admissible capacitive sensor mode"""

RESERVED: CapSenseMode.ValueType  # 0
"""Reserved, do not use."""
INACTIVE: CapSenseMode.ValueType  # 1
"""Cap sensor is inactive."""
ACTIVE_AUTO_THRESHOLD: CapSenseMode.ValueType  # 2
"""Cap sensor is active in automatic threshold mode."""
ACTIVE_NOISE_ATT: CapSenseMode.ValueType  # 4
"""Cap sensor is active with noise mitigation enabled."""
ACTIVE_NORMAL: CapSenseMode.ValueType  # 5
"""Cap sensor is active in normal mode."""
CONFIGURATION: CapSenseMode.ValueType  # 6
"""Configuration mode."""
global___CapSenseMode = CapSenseMode

class DeviceType(google.protobuf.message.Message):
    """Device type"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DEVICE_TYPE_FIELD_NUMBER: builtins.int
    device_type: Common_pb2.DeviceTypes.ValueType
    """Device type"""
    def __init__(
        self,
        *,
        device_type: Common_pb2.DeviceTypes.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["device_type", b"device_type"]) -> None: ...

global___DeviceType = DeviceType

class RunMode(google.protobuf.message.Message):
    """Run mode"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    RUN_MODE_FIELD_NUMBER: builtins.int
    run_mode: global___RunModes.ValueType
    """Run mode"""
    def __init__(
        self,
        *,
        run_mode: global___RunModes.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["run_mode", b"run_mode"]) -> None: ...

global___RunMode = RunMode

class FirmwareVersion(google.protobuf.message.Message):
    """Firmware version for the device"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    FIRMWARE_VERSION_FIELD_NUMBER: builtins.int
    firmware_version: builtins.int
    """Firmware version"""
    def __init__(
        self,
        *,
        firmware_version: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["firmware_version", b"firmware_version"]) -> None: ...

global___FirmwareVersion = FirmwareVersion

class BootloaderVersion(google.protobuf.message.Message):
    """Bootloader version for the device"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    BOOTLOADER_VERSION_FIELD_NUMBER: builtins.int
    bootloader_version: builtins.int
    """Bootloader version"""
    def __init__(
        self,
        *,
        bootloader_version: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["bootloader_version", b"bootloader_version"]) -> None: ...

global___BootloaderVersion = BootloaderVersion

class ModelNumber(google.protobuf.message.Message):
    """Model number for the device"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MODEL_NUMBER_FIELD_NUMBER: builtins.int
    model_number: builtins.str
    """Model number of size 25 including null character"""
    def __init__(
        self,
        *,
        model_number: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["model_number", b"model_number"]) -> None: ...

global___ModelNumber = ModelNumber

class PartNumber(google.protobuf.message.Message):
    """Part number for the device"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PART_NUMBER_FIELD_NUMBER: builtins.int
    part_number: builtins.str
    """Part number of size 25 including null character"""
    def __init__(
        self,
        *,
        part_number: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["part_number", b"part_number"]) -> None: ...

global___PartNumber = PartNumber

class SerialNumber(google.protobuf.message.Message):
    """Serial number for the device"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SERIAL_NUMBER_FIELD_NUMBER: builtins.int
    serial_number: builtins.str
    """Serial number of size 25 including null character"""
    def __init__(
        self,
        *,
        serial_number: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["serial_number", b"serial_number"]) -> None: ...

global___SerialNumber = SerialNumber

class MACAddress(google.protobuf.message.Message):
    """MAC address for the device"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MAC_ADDRESS_FIELD_NUMBER: builtins.int
    mac_address: builtins.bytes
    """MAC address"""
    def __init__(
        self,
        *,
        mac_address: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["mac_address", b"mac_address"]) -> None: ...

global___MACAddress = MACAddress

class IPv4Settings(google.protobuf.message.Message):
    """IPv4 settings for the device, including address, subnet mask, and default gateway"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    IPV4_ADDRESS_FIELD_NUMBER: builtins.int
    IPV4_SUBNET_MASK_FIELD_NUMBER: builtins.int
    IPV4_DEFAULT_GATEWAY_FIELD_NUMBER: builtins.int
    ipv4_address: builtins.int
    """IPv4Address"""
    ipv4_subnet_mask: builtins.int
    """IPv4SubnetMask"""
    ipv4_default_gateway: builtins.int
    """IPv4DefaultGateway"""
    def __init__(
        self,
        *,
        ipv4_address: builtins.int = ...,
        ipv4_subnet_mask: builtins.int = ...,
        ipv4_default_gateway: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["ipv4_address", b"ipv4_address", "ipv4_default_gateway", b"ipv4_default_gateway", "ipv4_subnet_mask", b"ipv4_subnet_mask"]) -> None: ...

global___IPv4Settings = IPv4Settings

class PartNumberRevision(google.protobuf.message.Message):
    """Part number revision for the device"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    PART_NUMBER_REVISION_FIELD_NUMBER: builtins.int
    part_number_revision: builtins.str
    """Part number revision"""
    def __init__(
        self,
        *,
        part_number_revision: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["part_number_revision", b"part_number_revision"]) -> None: ...

global___PartNumberRevision = PartNumberRevision

class PowerOnSelfTestResult(google.protobuf.message.Message):
    """Result of power on self test"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    POWER_ON_SELF_TEST_RESULT_FIELD_NUMBER: builtins.int
    power_on_self_test_result: builtins.int
    """Power on self test result"""
    def __init__(
        self,
        *,
        power_on_self_test_result: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["power_on_self_test_result", b"power_on_self_test_result"]) -> None: ...

global___PowerOnSelfTestResult = PowerOnSelfTestResult

class RebootRqst(google.protobuf.message.Message):
    """Reboot request with bootloader delay"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    DELAY_FIELD_NUMBER: builtins.int
    delay: builtins.int
    """Bootloader delay"""
    def __init__(
        self,
        *,
        delay: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["delay", b"delay"]) -> None: ...

global___RebootRqst = RebootRqst

class SafetyInformation(google.protobuf.message.Message):
    """Information about a specific safety"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    HANDLE_FIELD_NUMBER: builtins.int
    CAN_CHANGE_SAFETY_STATE_FIELD_NUMBER: builtins.int
    HAS_WARNING_THRESHOLD_FIELD_NUMBER: builtins.int
    HAS_ERROR_THRESHOLD_FIELD_NUMBER: builtins.int
    LIMIT_TYPE_FIELD_NUMBER: builtins.int
    DEFAULT_WARNING_THRESHOLD_FIELD_NUMBER: builtins.int
    DEFAULT_ERROR_THRESHOLD_FIELD_NUMBER: builtins.int
    UPPER_HARD_LIMIT_FIELD_NUMBER: builtins.int
    LOWER_HARD_LIMIT_FIELD_NUMBER: builtins.int
    STATUS_FIELD_NUMBER: builtins.int
    UNIT_FIELD_NUMBER: builtins.int
    @property
    def handle(self) -> Common_pb2.SafetyHandle:
        """Safety handle that this information is about"""
    can_change_safety_state: builtins.bool
    """True if related safety configuration can be modified"""
    has_warning_threshold: builtins.bool
    """True if safety status can go in Warning"""
    has_error_threshold: builtins.bool
    """True if safety status can go in Error"""
    limit_type: global___SafetyLimitType.ValueType
    """Safety limit type"""
    default_warning_threshold: builtins.float
    """Default warning threshold (if 'limit_type' is either MINIMAL_LIMIT or MAXIMAL_LIMIT and 'has_warning_threshold' is true)"""
    default_error_threshold: builtins.float
    """Default error threshold (if 'limit_type' is either MINIMAL_LIMIT or MAXIMAL_LIMIT and 'has_error_threshold' is true)"""
    upper_hard_limit: builtins.float
    """Maximal threshold value (if 'limit_type' is either MINIMAL_LIMIT or MAXIMAL_LIMIT)"""
    lower_hard_limit: builtins.float
    """Minimal threshold value (if 'limit_type' is either MINIMAL_LIMIT or MAXIMAL_LIMIT)"""
    status: Common_pb2.SafetyStatusValue.ValueType
    """Current Safety status"""
    unit: Common_pb2.Unit.ValueType
    """Unit that the safety status is in"""
    def __init__(
        self,
        *,
        handle: Common_pb2.SafetyHandle | None = ...,
        can_change_safety_state: builtins.bool = ...,
        has_warning_threshold: builtins.bool = ...,
        has_error_threshold: builtins.bool = ...,
        limit_type: global___SafetyLimitType.ValueType = ...,
        default_warning_threshold: builtins.float = ...,
        default_error_threshold: builtins.float = ...,
        upper_hard_limit: builtins.float = ...,
        lower_hard_limit: builtins.float = ...,
        status: Common_pb2.SafetyStatusValue.ValueType = ...,
        unit: Common_pb2.Unit.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["handle", b"handle"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["can_change_safety_state", b"can_change_safety_state", "default_error_threshold", b"default_error_threshold", "default_warning_threshold", b"default_warning_threshold", "handle", b"handle", "has_error_threshold", b"has_error_threshold", "has_warning_threshold", b"has_warning_threshold", "limit_type", b"limit_type", "lower_hard_limit", b"lower_hard_limit", "status", b"status", "unit", b"unit", "upper_hard_limit", b"upper_hard_limit"]) -> None: ...

global___SafetyInformation = SafetyInformation

class SafetyInformationList(google.protobuf.message.Message):
    """Array of safety information"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INFORMATION_FIELD_NUMBER: builtins.int
    @property
    def information(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SafetyInformation]: ...
    def __init__(
        self,
        *,
        information: collections.abc.Iterable[global___SafetyInformation] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["information", b"information"]) -> None: ...

global___SafetyInformationList = SafetyInformationList

class SafetyEnable(google.protobuf.message.Message):
    """Enable or disable a specific safety"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    HANDLE_FIELD_NUMBER: builtins.int
    ENABLE_FIELD_NUMBER: builtins.int
    @property
    def handle(self) -> Common_pb2.SafetyHandle:
        """Handle to safety to enable or disable"""
    enable: builtins.bool
    """Safety enable state"""
    def __init__(
        self,
        *,
        handle: Common_pb2.SafetyHandle | None = ...,
        enable: builtins.bool = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["handle", b"handle"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["enable", b"enable", "handle", b"handle"]) -> None: ...

global___SafetyEnable = SafetyEnable

class SafetyThreshold(google.protobuf.message.Message):
    """Configure threshold of a specific safety"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    HANDLE_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    @property
    def handle(self) -> Common_pb2.SafetyHandle:
        """Identifies safety to configure"""
    value: builtins.float
    """Safety threshold value"""
    def __init__(
        self,
        *,
        handle: Common_pb2.SafetyHandle | None = ...,
        value: builtins.float = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["handle", b"handle"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["handle", b"handle", "value", b"value"]) -> None: ...

global___SafetyThreshold = SafetyThreshold

class SafetyConfiguration(google.protobuf.message.Message):
    """Configuration for a safety"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    HANDLE_FIELD_NUMBER: builtins.int
    ERROR_THRESHOLD_FIELD_NUMBER: builtins.int
    WARNING_THRESHOLD_FIELD_NUMBER: builtins.int
    ENABLE_FIELD_NUMBER: builtins.int
    @property
    def handle(self) -> Common_pb2.SafetyHandle:
        """Handle to safety to configure"""
    error_threshold: builtins.float
    """Safety error threshold value"""
    warning_threshold: builtins.float
    """Safety warning threshold value"""
    @property
    def enable(self) -> global___SafetyEnable:
        """Safety enable state"""
    def __init__(
        self,
        *,
        handle: Common_pb2.SafetyHandle | None = ...,
        error_threshold: builtins.float = ...,
        warning_threshold: builtins.float = ...,
        enable: global___SafetyEnable | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["enable", b"enable", "handle", b"handle"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["enable", b"enable", "error_threshold", b"error_threshold", "handle", b"handle", "warning_threshold", b"warning_threshold"]) -> None: ...

global___SafetyConfiguration = SafetyConfiguration

class SafetyConfigurationList(google.protobuf.message.Message):
    """Array of safety configurations"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CONFIGURATION_FIELD_NUMBER: builtins.int
    @property
    def configuration(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___SafetyConfiguration]:
        """Safety configuration"""
    def __init__(
        self,
        *,
        configuration: collections.abc.Iterable[global___SafetyConfiguration] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["configuration", b"configuration"]) -> None: ...

global___SafetyConfigurationList = SafetyConfigurationList

class SafetyStatus(google.protobuf.message.Message):
    """Safety status"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    VALUE_FIELD_NUMBER: builtins.int
    value: Common_pb2.SafetyStatusValue.ValueType
    """Safety status (e.g. in error, warning or normal state)"""
    def __init__(
        self,
        *,
        value: Common_pb2.SafetyStatusValue.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["value", b"value"]) -> None: ...

global___SafetyStatus = SafetyStatus

class CalibrationParameter(google.protobuf.message.Message):
    """Single calibration parameter information"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CALIBRATION_PARAMETER_IDENTIFIER_FIELD_NUMBER: builtins.int
    SIGNEDINTVALUE_FIELD_NUMBER: builtins.int
    UNSIGNEDINTVALUE_FIELD_NUMBER: builtins.int
    FLOATVALUE_FIELD_NUMBER: builtins.int
    calibration_parameter_identifier: builtins.int
    """Calibration parameter identifier"""
    signedIntValue: builtins.int
    """Signed int calibration value."""
    unsignedIntValue: builtins.int
    """Unsigned int calibration value."""
    floatValue: builtins.float
    """Float calibration value."""
    def __init__(
        self,
        *,
        calibration_parameter_identifier: builtins.int = ...,
        signedIntValue: builtins.int = ...,
        unsignedIntValue: builtins.int = ...,
        floatValue: builtins.float = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["floatValue", b"floatValue", "signedIntValue", b"signedIntValue", "unsignedIntValue", b"unsignedIntValue", "value", b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["calibration_parameter_identifier", b"calibration_parameter_identifier", "floatValue", b"floatValue", "signedIntValue", b"signedIntValue", "unsignedIntValue", b"unsignedIntValue", "value", b"value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["value", b"value"]) -> typing_extensions.Literal["signedIntValue", "unsignedIntValue", "floatValue"] | None: ...

global___CalibrationParameter = CalibrationParameter

class Calibration(google.protobuf.message.Message):
    """Calibration information to push to device"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CALIBRATION_ITEM_FIELD_NUMBER: builtins.int
    CALIBRATION_PARAMETER_FIELD_NUMBER: builtins.int
    calibration_item: global___CalibrationItem.ValueType
    """Item to calibrate"""
    @property
    def calibration_parameter(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___CalibrationParameter]:
        """Parameters associated to calibration item"""
    def __init__(
        self,
        *,
        calibration_item: global___CalibrationItem.ValueType = ...,
        calibration_parameter: collections.abc.Iterable[global___CalibrationParameter] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["calibration_item", b"calibration_item", "calibration_parameter", b"calibration_parameter"]) -> None: ...

global___Calibration = Calibration

class CalibrationElement(google.protobuf.message.Message):
    """Calibration element"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CALIBRATION_ITEM_FIELD_NUMBER: builtins.int
    calibration_item: global___CalibrationItem.ValueType
    """Item to get status"""
    def __init__(
        self,
        *,
        calibration_item: global___CalibrationItem.ValueType = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["calibration_item", b"calibration_item"]) -> None: ...

global___CalibrationElement = CalibrationElement

class CalibrationResult(google.protobuf.message.Message):
    """Result of a calibration"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CALIBRATION_STATUS_FIELD_NUMBER: builtins.int
    CALIBRATION_DETAILS_FIELD_NUMBER: builtins.int
    calibration_status: global___CalibrationStatus.ValueType
    """Calibration status"""
    calibration_details: builtins.int
    """Additional information (used when status is in fault)"""
    def __init__(
        self,
        *,
        calibration_status: global___CalibrationStatus.ValueType = ...,
        calibration_details: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["calibration_details", b"calibration_details", "calibration_status", b"calibration_status"]) -> None: ...

global___CalibrationResult = CalibrationResult

class CapSenseConfig(google.protobuf.message.Message):
    """Capacitive sensor configuration message"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MODE_FIELD_NUMBER: builtins.int
    THRESHOLD_A_FIELD_NUMBER: builtins.int
    THRESHOLD_B_FIELD_NUMBER: builtins.int
    mode: global___CapSenseMode.ValueType
    """Operational mode of the sensor"""
    threshold_a: builtins.float
    """Sensitivity of the sensor A (0-100%)."""
    threshold_b: builtins.float
    """Sensitivity of the sensor B (0-100%)."""
    def __init__(
        self,
        *,
        mode: global___CapSenseMode.ValueType = ...,
        threshold_a: builtins.float = ...,
        threshold_b: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["mode", b"mode", "threshold_a", b"threshold_a", "threshold_b", b"threshold_b"]) -> None: ...

global___CapSenseConfig = CapSenseConfig

class CapSenseRegister(google.protobuf.message.Message):
    """Message used to address a register"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ADDRESS_FIELD_NUMBER: builtins.int
    VALUE_FIELD_NUMBER: builtins.int
    address: builtins.int
    """Register address"""
    value: builtins.int
    """Register value"""
    def __init__(
        self,
        *,
        address: builtins.int = ...,
        value: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["address", b"address", "value", b"value"]) -> None: ...

global___CapSenseRegister = CapSenseRegister
